'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.animateScroll = undefined;
exports.updateHistory = updateHistory;

var _requestanimationframeTimer = require('requestanimationframe-timer');

var animateScroll = exports.animateScroll = function () {
  var timeoutId = void 0;
  var resolvePrevious = void 0;

  return function animateScroll(id, animate) {
    return new Promise(function (resolve, reject) {
      var element = id ? document.getElementById(id) : document.body;

      if (!element) {
        return reject('Cannot find element: #' + id);
      }

      var offset = animate.offset,
          duration = animate.duration,
          easing = animate.easing;

      var start = getScrollTop();
      var to = getOffsetTop(element) + offset;
      var change = to - start;

      function animateFn() {
        var elapsedTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

        var increment = 20;
        var elapsed = elapsedTime + increment;
        var position = easing(null, elapsed, start, change, duration);
        setScrollTop(position);
        if (elapsed < duration) {
          timeoutId = (0, _requestanimationframeTimer.setTimeout)(function () {
            animateFn(elapsed);
          }, increment);
        } else {
          timeoutId = undefined;
          return resolve(id);
        }
      }

      if (timeoutId) {
        (0, _requestanimationframeTimer.clearTimeout)(timeoutId);
        resolvePrevious();
      }
      resolvePrevious = resolve;
      animateFn();
    });
  };
}();

function updateHistory(id) {
  id = '#' + id;
  if (history.pushState) {
    history.pushState(null, null, id);
  } else {
    location.hash = id;
  }
}

function getScrollTop() {
  // like jQuery -> $('html, body').scrollTop
  return document.documentElement.scrollTop || document.body.scrollTop;
}

function setScrollTop(position) {
  document.documentElement.scrollTop = document.body.scrollTop = position;
}

function getOffsetTop(element) {
  var _element$getBoundingC = element.getBoundingClientRect(),
      top = _element$getBoundingC.top;

  return top + getScrollTop();
}